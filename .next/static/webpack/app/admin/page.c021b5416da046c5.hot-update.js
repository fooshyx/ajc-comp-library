"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./src/lib/svgUtils.ts":
/*!*****************************!*\
  !*** ./src/lib/svgUtils.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSVGDataURL: () => (/* binding */ createSVGDataURL),\n/* harmony export */   processSVGFile: () => (/* binding */ processSVGFile),\n/* harmony export */   validateSVGFile: () => (/* binding */ validateSVGFile)\n/* harmony export */ });\nconst processSVGFile = (file)=>{\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (e)=>{\n            var _e_target;\n            const svgContent = (_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result;\n            // Basic SVG validation\n            if (!svgContent.includes('<svg') || !svgContent.includes('</svg>')) {\n                reject(new Error('Invalid SVG file'));\n                return;\n            }\n            // Clean up the SVG and ensure proper dimensions\n            const cleanedSVG = cleanupSVG(svgContent, 64, 64);\n            resolve(cleanedSVG);\n        };\n        reader.onerror = ()=>{\n            reject(new Error('Failed to read SVG file'));\n        };\n        reader.readAsText(file);\n    });\n};\nconst cleanupSVG = (svgContent, width, height)=>{\n    // Parse the SVG to ensure it has proper dimensions\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(svgContent, 'image/svg+xml');\n    const svgElement = doc.querySelector('svg');\n    if (!svgElement) {\n        throw new Error('Invalid SVG structure');\n    }\n    // Get original viewBox or create one from width/height\n    let viewBox = svgElement.getAttribute('viewBox');\n    if (!viewBox) {\n        const originalWidth = svgElement.getAttribute('width') || width.toString();\n        const originalHeight = svgElement.getAttribute('height') || height.toString();\n        // Remove units and get numeric values\n        const w = parseFloat(originalWidth.toString().replace(/[^\\d.]/g, '')) || width;\n        const h = parseFloat(originalHeight.toString().replace(/[^\\d.]/g, '')) || height;\n        viewBox = \"0 0 \".concat(w, \" \").concat(h);\n    }\n    // Set consistent dimensions while preserving original viewBox\n    svgElement.setAttribute('width', width.toString());\n    svgElement.setAttribute('height', height.toString());\n    svgElement.setAttribute('viewBox', viewBox);\n    // Ensure the SVG doesn't have any scripts (security)\n    const scripts = svgElement.querySelectorAll('script');\n    scripts.forEach((script)=>script.remove());\n    // Set default black color for all elements that don't have explicit colors\n    const allElements = svgElement.querySelectorAll('*');\n    allElements.forEach((element)=>{\n        // Only set color if no fill or stroke is specified\n        if (!element.getAttribute('fill') && !element.getAttribute('stroke')) {\n            element.setAttribute('fill', 'black');\n        }\n        // If fill is set to 'currentColor' or similar, change to black\n        const fill = element.getAttribute('fill');\n        if (fill === 'currentColor' || fill === 'inherit') {\n            element.setAttribute('fill', 'black');\n        }\n        const stroke = element.getAttribute('stroke');\n        if (stroke === 'currentColor' || stroke === 'inherit') {\n            element.setAttribute('stroke', 'black');\n        }\n    });\n    // Set default fill on the root SVG if no default is set\n    if (!svgElement.getAttribute('fill')) {\n        svgElement.setAttribute('fill', 'black');\n    }\n    // Return the cleaned SVG as string\n    return new XMLSerializer().serializeToString(svgElement);\n};\nconst validateSVGFile = (file)=>{\n    const allowedTypes = [\n        'image/svg+xml'\n    ];\n    const maxSize = 1 * 1024 * 1024 // 1MB for SVG files\n    ;\n    if (!allowedTypes.includes(file.type)) {\n        return false;\n    }\n    if (file.size > maxSize) {\n        return false;\n    }\n    return true;\n};\nconst createSVGDataURL = (svgContent)=>{\n    const blob = new Blob([\n        svgContent\n    ], {\n        type: 'image/svg+xml'\n    });\n    return URL.createObjectURL(blob);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/svgUtils.ts\n"));

/***/ })

});