"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./src/lib/hybridStorage.ts":
/*!**********************************!*\
  !*** ./src/lib/hybridStorage.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hybridStorage: () => (/* binding */ hybridStorage)\n/* harmony export */ });\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage */ \"(app-pages-browser)/./src/lib/storage.ts\");\n/* harmony import */ var _dbStorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dbStorage */ \"(app-pages-browser)/./src/lib/dbStorage.ts\");\n\n\nconst CACHE_DURATION = 1000 * 60 * 60 // 1 hour\n;\nconst CACHE_VERSION = 1;\nclass HybridStorage {\n    // Cache metadata management\n    getCacheMetadata(key) {\n        if (!this.isClient) return null;\n        try {\n            const metadata = localStorage.getItem(\"\".concat(key, \"_metadata\"));\n            return metadata ? JSON.parse(metadata) : null;\n        } catch (e) {\n            return null;\n        }\n    }\n    setCacheMetadata(key, metadata) {\n        if (!this.isClient) return;\n        try {\n            localStorage.setItem(\"\".concat(key, \"_metadata\"), JSON.stringify(metadata));\n        } catch (e) {\n        // Silently fail if localStorage is unavailable\n        }\n    }\n    isCacheValid(key) {\n        const metadata = this.getCacheMetadata(key);\n        if (!metadata) return false;\n        const now = Date.now();\n        const lastUpdated = new Date(metadata.lastUpdated).getTime();\n        const isRecent = now - lastUpdated < CACHE_DURATION;\n        const isCorrectVersion = metadata.version === CACHE_VERSION;\n        return isRecent && isCorrectVersion;\n    }\n    updateCacheMetadata(key) {\n        this.setCacheMetadata(key, {\n            lastUpdated: new Date().toISOString(),\n            version: CACHE_VERSION\n        });\n    }\n    // Game data methods (cached)\n    async getUnits() {\n        try {\n            // Check if cache is valid\n            if (this.isClient && this.isCacheValid('units')) {\n                const cached = _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getUnits();\n                if (cached.length > 0) {\n                    return cached;\n                }\n            }\n            // Fetch from database\n            const units = await _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getUnits();\n            // Update cache\n            if (this.isClient) {\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveUnits(units);\n                this.updateCacheMetadata('units');\n            }\n            return units;\n        } catch (error) {\n            console.error('Error fetching units:', error);\n            // Fallback to cache even if stale\n            if (this.isClient) {\n                return _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getUnits();\n            }\n            return [];\n        }\n    }\n    async getTraits() {\n        try {\n            if (this.isClient && this.isCacheValid('traits')) {\n                const cached = _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getTraits();\n                if (cached.length > 0) {\n                    return cached;\n                }\n            }\n            const traits = await _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getTraits();\n            if (this.isClient) {\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveTraits(traits);\n                this.updateCacheMetadata('traits');\n            }\n            return traits;\n        } catch (error) {\n            console.error('Error fetching traits:', error);\n            if (this.isClient) {\n                return _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getTraits();\n            }\n            return [];\n        }\n    }\n    async getComponents() {\n        try {\n            if (this.isClient && this.isCacheValid('components')) {\n                const cached = _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getComponents();\n                if (cached.length > 0) {\n                    return cached;\n                }\n            }\n            const components = await _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getComponents();\n            if (this.isClient) {\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveComponents(components);\n                this.updateCacheMetadata('components');\n            }\n            return components;\n        } catch (error) {\n            console.error('Error fetching components:', error);\n            if (this.isClient) {\n                return _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getComponents();\n            }\n            return [];\n        }\n    }\n    async getItems() {\n        try {\n            if (this.isClient && this.isCacheValid('items')) {\n                const cached = _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getItems();\n                if (cached.length > 0) {\n                    return cached;\n                }\n            }\n            const items = await _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getItems();\n            if (this.isClient) {\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveItems(items);\n                this.updateCacheMetadata('items');\n            }\n            return items;\n        } catch (error) {\n            console.error('Error fetching items:', error);\n            if (this.isClient) {\n                return _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getItems();\n            }\n            return [];\n        }\n    }\n    // Get all game data efficiently\n    async getAllGameData() {\n        try {\n            // Check if all caches are valid\n            const allCacheValid = this.isClient && this.isCacheValid('units') && this.isCacheValid('traits') && this.isCacheValid('components') && this.isCacheValid('items');\n            if (allCacheValid) {\n                const units = _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getUnits();\n                const traits = _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getTraits();\n                const components = _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getComponents();\n                const items = _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getItems();\n                if (units.length > 0 && traits.length > 0 && components.length > 0 && items.length > 0) {\n                    return {\n                        units,\n                        traits,\n                        components,\n                        items\n                    };\n                }\n            }\n            // Fetch all from database in parallel\n            const [units, traits, components, items] = await Promise.all([\n                _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getUnits(),\n                _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getTraits(),\n                _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getComponents(),\n                _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getItems()\n            ]);\n            // Update all caches\n            if (this.isClient) {\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveUnits(units);\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveTraits(traits);\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveComponents(components);\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveItems(items);\n                this.updateCacheMetadata('units');\n                this.updateCacheMetadata('traits');\n                this.updateCacheMetadata('components');\n                this.updateCacheMetadata('items');\n            }\n            return {\n                units,\n                traits,\n                components,\n                items\n            };\n        } catch (error) {\n            console.error('Error fetching all game data:', error);\n            // Fallback to cache\n            if (this.isClient) {\n                return {\n                    units: _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getUnits(),\n                    traits: _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getTraits(),\n                    components: _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getComponents(),\n                    items: _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.getItems()\n                };\n            }\n            return {\n                units: [],\n                traits: [],\n                components: [],\n                items: []\n            };\n        }\n    }\n    // Composition methods (always use database)\n    async getCompositions(userId, publicOnly) {\n        try {\n            const params = new URLSearchParams();\n            if (userId) params.set('userId', userId);\n            if (publicOnly) params.set('public', 'true');\n            const response = await fetch(\"/api/compositions?\".concat(params.toString()));\n            if (!response.ok) throw new Error('Failed to fetch compositions');\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching compositions:', error);\n            return [];\n        }\n    }\n    async saveComposition(composition) {\n        try {\n            const response = await fetch('/api/compositions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(composition)\n            });\n            if (!response.ok) throw new Error('Failed to save composition');\n            return await response.json();\n        } catch (error) {\n            console.error('Error saving composition:', error);\n            return null;\n        }\n    }\n    async updateComposition(composition) {\n        try {\n            const response = await fetch('/api/compositions', {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(composition)\n            });\n            if (!response.ok) throw new Error('Failed to update composition');\n            return await response.json();\n        } catch (error) {\n            console.error('Error updating composition:', error);\n            return null;\n        }\n    }\n    async deleteComposition(id) {\n        try {\n            const response = await fetch(\"/api/compositions?id=\".concat(id), {\n                method: 'DELETE'\n            });\n            return response.ok;\n        } catch (error) {\n            console.error('Error deleting composition:', error);\n            return false;\n        }\n    }\n    // Cache management methods\n    async refreshCache() {\n        try {\n            console.log('Refreshing game data cache...');\n            // Fetch fresh data from database\n            const [units, traits, components, items] = await Promise.all([\n                _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getUnits(),\n                _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getTraits(),\n                _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getComponents(),\n                _dbStorage__WEBPACK_IMPORTED_MODULE_1__.dbStorageUtils.getItems()\n            ]);\n            // Update cache\n            if (this.isClient) {\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveUnits(units);\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveTraits(traits);\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveComponents(components);\n                _storage__WEBPACK_IMPORTED_MODULE_0__.storageUtils.saveItems(items);\n                this.updateCacheMetadata('units');\n                this.updateCacheMetadata('traits');\n                this.updateCacheMetadata('components');\n                this.updateCacheMetadata('items');\n            }\n            console.log('Cache refreshed successfully');\n        } catch (error) {\n            console.error('Error refreshing cache:', error);\n        }\n    }\n    clearCache() {\n        if (!this.isClient) return;\n        try {\n            // Clear data\n            localStorage.removeItem('tft_units');\n            localStorage.removeItem('tft_traits');\n            localStorage.removeItem('tft_components');\n            localStorage.removeItem('tft_items');\n            // Clear metadata\n            localStorage.removeItem('units_metadata');\n            localStorage.removeItem('traits_metadata');\n            localStorage.removeItem('components_metadata');\n            localStorage.removeItem('items_metadata');\n            console.log('Cache cleared successfully');\n        } catch (error) {\n            console.error('Error clearing cache:', error);\n        }\n    }\n    getCacheStatus() {\n        var _this_getCacheMetadata, _this_getCacheMetadata1, _this_getCacheMetadata2, _this_getCacheMetadata3;\n        if (!this.isClient) {\n            return {\n                units: {\n                    valid: false\n                },\n                traits: {\n                    valid: false\n                },\n                components: {\n                    valid: false\n                },\n                items: {\n                    valid: false\n                }\n            };\n        }\n        return {\n            units: {\n                valid: this.isCacheValid('units'),\n                lastUpdated: (_this_getCacheMetadata = this.getCacheMetadata('units')) === null || _this_getCacheMetadata === void 0 ? void 0 : _this_getCacheMetadata.lastUpdated\n            },\n            traits: {\n                valid: this.isCacheValid('traits'),\n                lastUpdated: (_this_getCacheMetadata1 = this.getCacheMetadata('traits')) === null || _this_getCacheMetadata1 === void 0 ? void 0 : _this_getCacheMetadata1.lastUpdated\n            },\n            components: {\n                valid: this.isCacheValid('components'),\n                lastUpdated: (_this_getCacheMetadata2 = this.getCacheMetadata('components')) === null || _this_getCacheMetadata2 === void 0 ? void 0 : _this_getCacheMetadata2.lastUpdated\n            },\n            items: {\n                valid: this.isCacheValid('items'),\n                lastUpdated: (_this_getCacheMetadata3 = this.getCacheMetadata('items')) === null || _this_getCacheMetadata3 === void 0 ? void 0 : _this_getCacheMetadata3.lastUpdated\n            }\n        };\n    }\n    constructor(){\n        this.isClient = \"object\" !== 'undefined';\n    }\n}\nconst hybridStorage = new HybridStorage();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/hybridStorage.ts\n"));

/***/ })

});